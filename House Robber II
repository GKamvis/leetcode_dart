/*
 * Time Complexity : O(N) leetcode (2^n) kimi hesabladı ancaq bu funskiyada 2 dəfə rob methodu çağrıldı və hır rob çağrıldıqda bir for dövrü işlədi O(N) 
 * Nəticədə (N + N) ~=> O(N)
 * Space Complexity O(N) 2 dəfə sublist methodu ilə list yaradılır.
 * */

import 'dart:math';

class Solution {
  int rob(List<int> nums) {
    if(nums.length == 1) return nums[0];
    return max(robs(nums.sublist(0 , nums.length - 1)) , robs(nums.sublist(1)));
    
  }
   int robs(List<int> nums){
        int rob1 = 0;
        int rob2 = 0;
        for(var num in nums){
            int newRobs = max(num + rob1 , rob2);
            rob1 = rob2;
            rob2 = newRobs;
        }
        return rob2;
    }
}
void main() {
  final sol = Solution();
  List<int>  nums = [2,3,2];
  print(sol.rob(nums));
  
  
  
  
}
