/*

Time Complexity :  leetcode belə hesabladı -O(N) ancaq O(N^2) ola bilər çünki hər dəfə isBalanced çağrildiqda height funskiyasida bərabərində işləyəcək.
Space Complexity : O(N) Ən pis halda ağacın hündürlüyünə bərabər olacaq.

*/

import 'dart:math';
 class TreeNode {
   int val;
   TreeNode? left;
   TreeNode? right;
   TreeNode([this.val = 0, this.left, this.right]);
 }

class Solution {
  bool isBalanced(TreeNode? root) {
    if(root == null) return true;
    int left = height(root.left);
    int right = height(root.right);

    return isBalanced(root.left) && isBalanced(root.right) && (left - right).abs() <=1;


  }
  int height(TreeNode? node){
    if(node == null) return 0;
    return max(height(node.left) , height(node.right)) + 1;
  }
}
void main() {
  TreeNode node1 = TreeNode(1);
  TreeNode node2 = TreeNode(2);
  TreeNode node3 = TreeNode(3);
  TreeNode node4 = TreeNode(4);
  TreeNode node5 = TreeNode(5);

  node1.left = node2; // 1 -> 2
  node1.right = node3; // 1 -> 3
  node2.left = node4; // 2 -> 4
  node2.right = node5; // 2 -> 5

  Solution solution = Solution();

  bool result = solution.isBalanced(node1);
  print(result);
}
