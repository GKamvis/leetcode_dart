/*
Time Complexity : O(N)    .split O(N) .map O(N) for dövrü o(N)  .gcd funskiyasi O(log min( n , m ))
Space Complexity : O(N)  parts O(N)  fractionParts isə hər dövrdə yenidən yaradılır deyə O(1) ola bilər. 

gcd funskiyasini simulasiya etsək əgər görürüki ədədlər sürətlə azalır:
int gcd(int a, int b) {
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}
*/

class Solution {
  String? fractionAddition(String expression) {
     List<String> parts = expression.split(RegExp(r'(?=[+-])'));
     parts = parts.map((part) => part.trim()).toList();
     int numeratorSum = 0; 
     int commonDenominator = 1;
    
    for(var part in parts){
     List<String> fractionParts = part.split('/');
      int numerator  = int.parse(fractionParts[0]);
      int deNumerator = int.parse(fractionParts[1]);
      
      
      numeratorSum = numeratorSum * deNumerator + commonDenominator * numerator; 
      commonDenominator *= deNumerator;
    }
    
    int gcd = commonDenominator.gcd(numeratorSum);
    
    numeratorSum ~/= gcd;
    commonDenominator ~/=gcd;
    
    return '$numeratorSum/$commonDenominator';
    
  }
}
void main() {
  Solution sol = Solution();
  String  expression = "-1/2+1/2+1/3";
  print(sol.fractionAddition(expression));
  
}
