/*
Time Complexity : O( log n) aşağida binary search ilə axtariş edilir yəni alqoritim hər dəfə işləyəndə axtariş edilə biləcək elementlərin sayı 2 dəfə azalır. Buda təxminən O(Log N) qədər zaman alır
Space Complexity : O(1) . Sabit dəyişənlər istifadə olunub.
*/


class Solution {
  List<int> searchRange(List<int> nums, int target) {
    if (nums.isEmpty) return [-1, -1];

    int Fleft(List<int> nums, int target) {
      int left = 0;
      int right = nums.length - 1;
      int index = -1;

      while (left <= right) {
        int mid = (left + right) ~/ 2;

        if (nums[mid] >= target) {
          right = mid - 1;
        } else {
          left = mid + 1;
        }

        if (nums[mid] == target) index = mid;
      }

      return index;
    }

    int Fright(List<int> nums, int target) {
      int left = 0;
      int right = nums.length - 1;
      int index = -1;

      while (left <= right) {
        int mid = (left + right) ~/ 2;

        if (nums[mid] <= target) {
          left = mid + 1;
        } else {
          right = mid - 1;
        }

        if (nums[mid] == target) index = mid;
      }

      return index;
    }

    List<int> list = [];
    list.addAll([Fleft(nums, target), Fright(nums, target)]);

    return list;
  }
}

void main() {
  Solution solution = Solution();

  List<int> nums = [5, 7, 7, 8, 8, 10];
  int target = 8;
  
  List<int> result = solution.searchRange(nums, target);
  
  print('Result: $result'); //  [3, 4]
}
