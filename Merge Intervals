/*
Time Complexity : O(N LOG N) .sort istifadə olunub O(N log N) və bir for dövrü var O(N) ortalamda O(NlogN)
Space Complexity : O(N) .sort O(N) istifadə edib  merged sabit ölçülü listtlərə bərabər olacaq ancaq list masivi ən pis halda O(k*2) sayda element saxlaya bilər( k merged listlərin sayıdır hər merged listindədə 2 element var).

*/

class Solution {
  List<List<int>> merge(List<List<int>> intervals) {
    intervals.sort((a , b) => a[0].compareTo(b[0]));

    final list = <List<int>>[];
    var merged = intervals[0];

    for(int i = 1; i < intervals.length ; i++){
        if(intervals[i][0] <= merged.last){
            merged.last = intervals[i][1] > merged.last ? intervals[i][1] : merged.last;
        }
        else{
            list.add(merged);
            merged=intervals[i];
        }
    }


    list.add(merged);
    return list;


    
  }
}
void main(){

    Solution sol = Solution();
    List<List<int>> intervals = [[1,3],[2,6],[8,10],[15,18]];

    print(sol.merge(intervals));

}
